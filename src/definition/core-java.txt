Please answer the below core-java Questions:

 What is programing language?
A.
A programming language is a computer language programmers use to develop software programs, scripts,
or other sets of instructions for computers to execute.
Although many languages share similarities, each has its own syntax. Once a programmer learns the languages rules,
syntax, and structure, they write the source code in a text editor or IDE.
Then, the programmer often compiles the code into machine language that can be understood by the computer.
Scripting languages, which do not require a compiler, use an interpreter to execute the script.

 What jdk contains or composed of and define each components?
A.
The Java Development Kit (JDK) is a software development environment used for developing
Java applications and applets.
Following is a list of the main components of the JDK:
+ The Runtime Interpreter - provides the support to run Java executable programs in compiled, bytecode format.
+ The Compiler - (javac) is used to compile Java source code files into executable Java bytecode classes. In Java, source code files have the extension .java.
+ The Applet Viewer - a tool that serves as a minimal test bed for final release Java applets.
+ The Debugger - enables you do check for logical errors in your code.
+ The Class File Disassembler - javap command disassembles a .class file. Its output depends on the options used. If no options are used, javap prints out the public fields and methods of the classes passed to it. javap prints its output to stdout.
+ The Header and Stub File Generator - the javah command generates the C header and source files that are needed to implement native methods. The generated header and source files are used by C programs to reference instance variables of an object from native source code. The .h file contains a structure definition whose layout parallels that of the corresponding class.
+ The Documentation Generator - The Javadoc™ tool parses the declarations and documentation comments in a set of Java source files and produces a corresponding set of HTML pages describing (by default) the public and protected classes, nested classes (but not anonymous inner classes), interfaces, constructors, methods, and fields.
+ Applet Demos - a tool used in cretion of java applets
+ API Source Code - Java application programming interface (API) is a list of all classes that are part of the Java development kit (JDK). It includes all Java packages, classes, and interfaces, along with their methods, fields, and constructors. These prewritten classes provide a tremendous amount of functionality to a programmer.

 What is IDE?
A.
An integrated development environment (IDE) is a software application
that provides comprehensive facilities to computer programmers for software development.
An IDE normally consists of at least a source code editor, build automation tools and a debugger.

 What are the IDEs available in the market to support java?
A.
Eclipse, IntelliJ, BlueJ, Codenvy, DrJava, Greenfoot, JCreator, (Oracle) JDeveloper, jGRASP, MyEclipse, NetBeans, Xcode, RAD for WebSphere Software etc.

 Explain the entire java life cycle.
A.
There are three main stages in the life cycle of a java program. They are:

 - Editing the program -  typing the program in a text-editor or an IDE. After completing editing of the program, we have to save the file with .java extension.
 - Compiling the source code - the output of the compiler is machine independent or platform independent code which is known as bytecode. The file which is generated after compilation is .class file.
 - Executing the byte code - the bytecode generated by the compiler will be executed by Java Virtual Machine (JVM). Input to the JVM is bytecode and output is machine code (0’s and 1’s) which will be executed by the CPU of the local machine.

 what is class?
A.
A class is an entity that determines how an object will behave and what the object will contain.
In other words, it is a blueprint or a set of instruction to build a specific type of object.

 What is object?
A.
A Java object is a combination of data and procedures working on the available data.
An object has a state and behavior.
The state of an object is stored in fields (variables), while methods (functions) display the object's behavior.
Objects are created from templates known as classes.

 What is the entry point of an application?
A.
The main method is the entry point of a Java application.
Specifically、when the Java Virtual Machine is told to run an application by specifying its class (by using the java application launcher),
it will look for the main method with the signature of public static void main(String[]) .

 Why main is static?
 A.
Java program's main method has to be declared static because keyword static allows main to be called without creating an object of the class in which the main method is defined.

 Why is main method public static and void in Java? Will the program compile, if the main method is not static?
A.
Main must be declared as public, since it must be called by code outside of its class when the program is started.
The keyword static allows main to be called without having to instantiate a particular instance of the class. Without having declared main method static, your program will successfully compile but won't execute and report error at run time.
This is necessary since main is called by the Java interpreter before any objects are made. The keyword void simply tells the compiler that main does not return a value.

 Which class is the superclass of all classes?
A.
The Object class, which is stored in the java. lang package, is the ultimate superclass of all Java classes (except for Object ).

What is difference between path and classpath variables?
A.
Once you installed Java on your machine, it is required to Set the PATH environment variable to conveniently run the executable (javac.exe, java.exe, javadoc.exe, and so on) from any directory without having to type the full path of the command, otherwise, you need to specify the full path every time you run it.
Classpath is system environment variable used by the Java compiler and JVM.
Java compiler and JVM is used Classpath to determine the location of required class files.

The path points to the location of the jre i.e. the java binary files such as the jvm and necessary libraries. The classpath points to the classes you developed so that the jvm can find them and load them when you run your product.
So essentially you need the path to find java so it can then find your classes and run them from the classpath

What is the difference between an Interface and Abstract class?
A.
- Main difference is methods of a Java interface are implicitly abstract and cannot have implementations.
- A Java abstract class can have instance methods that implements a default behavior.
- Variables declared in a Java interface is by default final. An  abstract class may contain non-final variables.
- Members of a Java interface are public by default. A Java abstract class can have the usual flavors of class members like private, protected, etc..
- Java interface should be implemented using keyword “implements”; A Java abstract class should be extended using keyword “extends”.
- An interface can extend another Java interface only, an abstract class can extend another Java class and implement multiple Java interfaces.
- A Java class can implement multiple interfaces but it can extend only one abstract class.
- Interface is absolutely abstract and cannot be instantiated; A Java abstract class also cannot be instantiated, but can be invoked if a main() exists.

Can you make an Object from an Interface and Abstract class ? if not how do you use it ?
A.
You can not instantiate an abstract class or an interface - you can use them by instantiating one of their subclasses/implementers.

what is Access Specifier?
A.
In Java, methods and data members of a class/interface can have one of the following four access specifiers. The access specifiers are listed according to their restrictiveness order.
1) private (accessible within the class where defined)
2) default or package private (when no access specifier is specified)
3) protected
4) public (accessible from any class)
But, the classes and interfaces themselves can have only two access specifiers when declared outside any other class.
1) public
2) default (when no access specifier is specified)
We cannot declare class/interface with private or protected access specifiers.

What is OOP ? Define each feature of java OOP.
A.
Object-Oriented Programming or OOPs refers to languages that uses objects in programming. Object-oriented programming aims to implement real-world entities like inheritance, hiding, polymorphism etc in programming.
The main aim of OOP is to bind together the data and the functions that operate on them so that no other part of the code can access this data except that function.
Core OOPS concepts are:
Class - The class is a group of similar entities. It is only a logical component and not the physical entity.
Object - can be defined as an instance of a class, and there can be multiple instances of a class in a program. An Object contains both the data and the function, which operates on the data.
Inheritance - one object acquires the properties and behaviors of the parent object. It’s creating a parent-child relationship between two classes.
Polymorphism -  refers to the ability of a variable, object or function to take on multiple forms, such as using a method with different parameters.
Abstraction - an act of representing essential features without including background details. It is a technique of creating a new data type that is suited for a specific application.
Encapsulation - an OOP technique of wrapping the data and code - the variables of a class are always hidden from other classes. It can only be accessed using the methods of their current class.
Association - a relationship between two objects. It defines the diversity between objects. In this OOP concept, all object have their separate lifecycle, and there is no owner.
Aggregation - all objects have their separate lifecycle. However, there is ownership such that child object can’t belong to another parent object.
Composition - a specialized form of Aggregation. It is also called "death" relationship. Child objects do not have their lifecycle so when parent object deletes all child object will also delete automatically.

What is Java Package and which package is imported by default?
A.
A package in Java is used to group related classes. Think of it as a folder in a file directory. We use packages to avoid name conflicts, and to write a better maintainable code.
Packages are divided into two categories:
Built-in Packages (packages from the Java API)
User-defined Packages (create your own packages)
Package is imported into a program by using the import keyword.

Three packages are imported by default for each source file.
First, the package with no name.
Second, the java.lang package.
And third, the current package (the package in which the current file is defined).
In every Java program there can be one unnamed package, which is simply a package with no name.
If you omit the package statement while writing the class definition, the class name is placed into the default package, which has no name. Java compiler automatically imports this package.
Java is a pure object oriented programming language where code is written in form of classes. These class components are called types.
Types in Java come in two flavours: built-in or primitive types and types from components. Primitive types can be used directly while component types must usually be ordered from a library by importing them from the appropriate package. The technical term for ordering a component from a library is bringing a component into scope.
The Java standard libraries include java.lang package by default, which contains a number of components that are used very commonly in Java programs. Java is useless without much of the functionality in java.lang, that's why java.lang is implicitly imported by the compiler for all programs.

What is API? Name list of API that you have used so far.
A.
API is the acronym for Application Programming Interface, which is a software intermediary that allows two applications to talk to each other.
Each time we use an app like Facebook, send an instant message, or check the weather on your phone, we are using an API.

Does java support multiple inheritance, explain why or why not?
A.
Java supports multiple inheritance through interfaces only.
An interface contains variables and methods like a class but the methods in an interface are abstract by default unlike a class. Multiple inheritance by interface occurs if a class implements multiple interfaces or also if an interface itself extends multiple interfaces.
A class can implement any number of interfaces but can extend only one class.
Multiple inheritance is not supported because it leads to deadly diamond problem - an ambiguity that arises when two classes B and C inherit from A, and class D inherits from both B and C.

What is method overloading and when it happens?
A.
Method Overloading is a feature that allows a class to have more than one method having the same name, if their argument lists are different.
Three ways to overload a method:
 - Number of parameters
 - Data type of parameters.
 - Sequence of Data type of parameters.
 If two methods have same name, same parameters and have different return type, then this is not a valid method overloading example.

Explain exceptions in java and how to handle it.
A.
An Exception is an unwanted event that interrupts the normal flow of the program.
When an exception occurs program execution gets terminated. In such cases we get a system generated error message.
Exceptions can be handled in Java by providing meaningful messages to the users about the issue rather than a system generated message, which may not be understandable to a user.

What is static keyword in java? How it has been used in variables and methods ?
A.
The keyword static indicates that the particular member belongs to a type itself, rather than to an instance of that type.
This means that only one instance of that static member is created which is shared across all instances of the class.
If a field (or Class Variable) is declared static, then exactly a single copy of that field is created and shared among all instances of that class. It doesn't matter how many times we initialize a class - there will always be only one copy of static field belonging to it.
The value of this static field will be shared across all object of either same of any different class.
From the memory perspective, static variables go in a particular pool in JVM memory called Metaspace.

Similar to static fields, static methods also belong to a class instead of the object, and so they can be called without creating the object of the class in which they reside.
They're meant to be used without creating objects of the class.

What is final and how it has been used variables and methods?
A.
The final keyword can be used while declaring an entity - a variable, a method, a class or parameter.
Using the final keyword means that the value can’t be modified in the future.

If a variable is declared with the final keyword, its value cannot be changed once initialized.
The variable does not necessarily have to be initialized at the time of declaration. If it’s declared but not yet initialized, it’s called a blank final variable.

A method, declared with the final keyword, cannot​ be overridden or hidden by subclasses.

A class​ declared as a final class, cannot be subclassed

Final keyword with a parameter variable cannot be changed anywhere in the function


What is final, finally and finalize?
A.
The final keyword can be used while declaring an entity - a variable, a method, a class or parameter - means that it can’t be modified in the future.

A finally block contains all the crucial statements that must be executed whether exception occurs or not in a try-catch exception handling blocks. The statements present in this block will always execute regardless of whether exception occurs in try block or not such as closing a connection, stream etc.

finalize() is called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup.


What is a constructor ?
A.
A constructor in Java is a special method that is used to initialize objects. The constructor is called when an object of a class is created. It can be used to set initial values for object attributes using parameters.


Can we have multiple constructors in a class?
A.
We can create any number of constructors in a class by providing different parameters.


All classes have at least one constructor. If a class does not explicitly declare any, the Java compiler automatically provides a no-argument constructor, called the default constructor.


What is "this" keyword in java ?
A.
The this keyword refers to the current object in a method or constructor.

The most common use of the this keyword is to eliminate the confusion between class attributes and parameters with the same name (because a class attribute is shadowed by a method or constructor parameter).
6 usese of java this keyword:
this can be used to refer current class instance variable.
this can be used to invoke current class method (implicitly)
this() can be used to invoke current class constructor.
this can be passed as an argument in the method call.
this can be passed as argument in the constructor call.
this can be used to return the current class instance from the method.

What is "super" keyword in java? How many possible way can you use?
A.
1) To access the data members of parent class when both parent and child class have member with same name
2) To explicitly call the no-arg and parameterized constructor of parent class
3) To access the method of parent class when child class has overridden that method.

What is JVM stand for ?
A.
A Java virtual machine (JVM) is a virtual machine that enables a computer to run Java programs as well as programs written in other languages that are also compiled to Java bytecode.

Is JVM platform independent?
A.
The JVM is not platform independent. Java Virtual Machine (JVM) provides the environment to execute the java file(. Class file).
So at the end it's depends on your kernel , and kernel is differ from OS (Operating System) to OS.

What version of java are you using?
A.
Java 13.0.2

What is JAR stand for ?
A.
JAR stands for Java ARchive.
It's a file format based on the popular ZIP file format and is used for aggregating many files into one.

What is the difference between JDK and JVM?
A.
JDK is Java Development Kit and JVM is Java Virtual Machine.
JDK contains JVM and whole other tools for java development inside it.
JVM converts bytecode to machine code and execute it on machine. There is no matching functionality between JDK and JVM.

What is the difference between JVM and JRE?
A.
The JRE is the environment within which the virtual machine runs - JRE is the container, JVM is the content.
Java Runtime Environment contains JVM, class libraries, and other supporting files. It does not contain any development tools such as compiler, debugger, etc.

What is compile time and run time?
A.
Runtime and compile time are programming terms that refer to different stages of software program development.
In order to create a program, a developer first writes source code, which defines how the program will function.
The source code must be compiled into machine code in order to become and executable program- this compilation process is referred to as compile time.
A compiled program can be opened and run by a user. When an application is running, it is called runtime.

The terms "runtime" and "compile time" are often used by programmers to refer to different types of errors.
A compile time error is a problem such as a syntax error or missing file reference that prevents the program from successfully compiling.
The compiler produces compile time errors and usually indicates what line of the source code is causing the problem.
If a program's source code has already been compiled into an executable program, it may still have bugs that occur while the program is running.
These types of problems are called runtime errors since they occur at runtime.

What is heap?
A.
A Heap is a special Tree-based data structure in which the tree is a complete binary tree.
Heaps can be of two types:

Max-Heap: In a Max-Heap the key present at the root node must be greatest among the keys present at all of it’s children. The same property must be recursively true for all sub-trees in that Binary Tree.
Min-Heap: In a Min-Heap the key present at the root node must be minimum among the keys present at all of it’s children. The same property must be recursively true for all sub-trees in that Binary Tree.

How does java manage its memory?
A.
Memory management is the process of allocating memory to new Java objects and de-allocating memory from unused objects.
In Java, memory management happens automatically and memory allocation and de-allocation happen in the background.
Generally, memory is divided into - stack memory and heap memory. As soon as JVM (Java Virtual Machine) starts, these memories are assigned by the system.
Stack memory is responsible for holding references to objects which are stored in heap and also stores values of Java primitive types. It always works on LIFO (Last-In-First-Out) order.
The memory that actually stores the object is called heap memory. The objects in heap are referenced by variables in stack memory. As soon as an object is created, heap memory is created for that object with its reference in the stack. Objects stored in heap are.globally accessible and it has larger size when compared to stack memory.
Garbage collector automatically reclaims the memory for reuse and helps in eliminating memory leaks and other memory-related problems. When an object is no longer used, the Java garbage collector reclaims the underlying memory and reuses it for future object allocations.
JVM manages the heap area for all objects and as long as the object is being referenced, it is considered alive. Once an object is no longer referenced or not reachable by an application, the garbage collector removes this object and reclaims the unused memory.

What is the difference between String, StringBuffer and StringBuilder?
A.
Strings in Java are objects used to represent a sequence of character.
They can be either created using the String Literal or by using the NEW keyword.
Strings are immutable in Java are represented in the UTF-16 format.
When a new String is created, it looks for the String with the same value in the JVM string pool. If it finds a same value, then it returns the reference else it created a String object and places that object in the String pool.
The string pool has string objects that are cached due to which string is immutable. Multiple clients share the cached string literals. The risks involved in the action of one client would affect all the other clients.

StringBuffer and StringBuilder are classes used for String manipulation.
These are mutable objects, which provide methods such as substring(), insert(), append(), delete() for String manipulation.
StringBuffer performance is slower when compared to StringBuilder

What is Singleton class?
A.
A Singleton class is a class that can have only one object (an instance of the class) at a time.
After first time, if we try to instantiate the Singleton class, the new variable also points to the first instance created.
So whatever modifications we do to any variable inside the class through any instance, it affects the variable of the single instance created and is visible if we access that variable through any variable of that class type defined.
To design a singleton class:
1) we make constructor as private.
2) we write a static method that has return type object of this singleton class.
For normal class we use constructor, whereas for singleton class we use getInstance() method.


What is Serialization and Deserialization?
A.
Serialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams.
The reverse process of creating object from sequence of bytes is called deserialization.
For serializing the object, we call the writeObject() method ObjectOutputStream, and for deserialization we call the readObject() method of ObjectInputStream class.
We must implement the Serializable interface for serializing the object.
for example: import java.io.Serializable;
             public class Student implements Serializable{  .. }

when to use transient variable in java?
A.
Transient is a variables modifier used in serialization.
At the time of serialization, if we don’t want to save value of a particular variable in a file, then we use transient keyword.
When JVM comes across transient keyword, it ignores original value of the variable and save default value of that variable data type.

Difference between while and do..while loop?
A.
the main difference between a while loop and do while loop is that while loop check condition before iteration of the loop.
On the other hand, the do-while loop verifies the condition after the execution of the statements inside the loop (it will execute at least once).

What is Enum?
A.
An Enum is a special class that represents a group of constants (unchangeable variables, like final variables).
To create an enum , use the enum keyword (instead of class or interface), and separate the constants with a comma.

What is Iterator?
A.
Iterators are used in Collection framework in Java to retrieve elements one by one.
To use an iterator to cycle through the contents of a collection:
1 - we obtain an iterator to the start of the collection by calling the collection's iterator( ) method.
2 - we set up a loop that makes a call to hasNext( ). Have the loop iterate as long as hasNext( ) returns true.
3 - 3btain each element by calling next( ) within the loop.

Which one will take more memory, an int or Integer?
A.
int is a primitive data type which takes 32 bits (4 bytes) to store.
Integer is an object which takes 128 bits (16 bytes) to store int value.

Why is String Immutable in Java?
A.
The string pool has string objects that are cached due to which string is immutable. Multiple clients share the cached string literals. The risks involved in the action of one client would affect all the other clients.
Another reason of why String class is immutable could die due to HashMap. Since Strings are very popular as HashMap key, it's important for them to be immutable so that they can retrieve the value object which was stored in HashMap.

What is constructor chaining in Java?
A.
Constructor chaining is the process of calling one constructor from another constructor with respect to current object.
Constructor chaining can be done in two ways:
1 - Within same class: It can be done using this() keyword for constructors in same class
2 - From base class: by using super() keyword to call constructor from the base class.

The difference between Serial and Parallel Garbage Collector?
A.
The serial collector is the simplest one. It’s mainly designed for single-threaded environments (e.g. 32 bit or Windows) and for small heaps. This collector freezes all application threads whenever it’s working, which disqualifies it for all intents and purposes from being used in a server environment.
You can use it by turning on the -XX:+UseSerialGC JVM argument

the Parallel collector is the JVM’s default collector.
Its biggest advantage is that is uses multiple threads to scan through and compact the heap.
The downside to the parallel collector is that it will stop application threads when performing either a minor or full GC collection. The parallel collector is best suited for apps that can tolerate application pauses and are trying to optimize for lower CPU overhead caused by the collector.

What is JIT stands for?
A.
The Just-In-Time (JIT) compiler is a component of the Java Runtime Environment that improves the performance of Java applications at run time.
Java programs consists of classes, which contain platform neutral bytecode that can be interpreted by a JVM on many different computer architectures.
At run time, the JVM loads the class files, determines the semantics of each individual bytecode, and performs the appropriate computation.
The additional processor and memory usage during interpretation means that a Java application performs more slowly than a native application.
The JIT compiler helps improve the performance of Java programs by compiling bytecode into native machine code at run time.

Explain Java Heap space and Garbage collection?
A.
Java objects reside in an area called the heap. The heap is created when the JVM starts up and may increase or decrease in size while the application runs.
Garbage collection is the process of looking at heap memory, identifying which objects are in use and which are not, and deleting the unused objects.

Can you guarantee the garbage collection process?
A.
No, because we cannot force garbage collection in Java.

What is the difference between stack and heap in Java?
A.
The main difference between heap and stack is that stack memory is used to store local variables and function call while heap memory is used to store objects in Java.

What is reflection in java and why is it useful?
A.
Reflection is an API which is used to examine or modify the behavior of methods, classes, interfaces at runtime.
Reflection allows instantiation of new objects, invocation of methods, and get/set operations on class variables dynamically at run time without having prior knowledge of its implementation.
An application may make use of external, user-defined classes by creating instances of extensibility objects using their fully-qualified names.
Debuggers use the property of reflection to examine private members on classes.

what is multithreading in java?
A.
Multithreading in Java is a process of executing multiple threads simultaneously.
A thread is a lightweight sub-process, the smallest unit of processing.
Multiprocessing and multithreading, both are used to achieve multitasking.

What is the use of synchronization in Java?
A.
Synchronized keyword in Java is used to provide mutually exclusive access to a shared resource with multiple threads in Java.
Synchronization in Java guarantees that no two threads can execute a synchronized method which requires the same lock simultaneously or concurrently.
Multi-threaded programs may often come to a situation where multiple threads try to access the same resources and finally produce erroneous and unforeseen results.
So it needs to be made sure by some synchronization method that only one thread can access the resource at a given point of time.
This synchronization is implemented in Java with a concept called monitors.
Only one thread can own a monitor at a given time. When a thread acquires a lock, it is said to have entered the monitor. All other threads attempting to enter the locked monitor will be suspended until the first thread exits the monitor.


What is Framework?
A.
Java Frameworks can be defined as the bodies of pre-written code to which you are allowed to add your own code for solving a domain-specific problem.
You can use a framework by making calls to its methods, inheritance or supplying callbacks, listeners, etc.
Frameworks in Java have the same syntax and can work with a similar concept, terms, and paradigms.
With the help of framework, we can focus on the business logic of our application, not on the writing basic functionalities like a database connection or handling exceptions.

What are the testing Framework available in java?
A.
JUnit, JBehave, Serenity, TestNG, Selenide, Jasmine, Qunite, Selenium, Cucumber, REST Assured etc.


Difference between jUnit and testNG?
A.
TestNG is a testing framework inspired from JUnit and NUnit but introducing some new functionalities that make it more powerful and easier to use.
JUnit does not support advanced annotations, TestNG supports advanced annotations and special annotations.
Junit does not support parallel testing, but testNG does.
Group test feature is TestNG's commonly used feature but is not available in JUnit
TestNG is known to be easier to use.

What are the dependencies for this project?
A.
Dependency is a broad software engineering term used to refer when a piece of software relies on another one.
Coupling (computer programming) In software engineering, coupling or dependency is the degree to which each program module relies on each one of the other modules. Program X uses Library Y.
For this project the dependencies are Java SDK, Apachi POI Library of JARs, JUnit framework.


what is dependency injection in java?
A.
Dependency injection (DI) is the concept in which objects get other required objects from outside.
The general concept behind dependency injection is called Inversion of Control.
A Java class has a dependency on another class, if it uses an instance of this class. We call this a class dependency.
If the Java class creates an instance of another class via the new operator, it cannot be used (and tested) independently from this class and this is called a hard dependency.
There are three types of dependency injection:
1 - constructor injection: the dependencies are provided through a class constructor.
2 - setter injection: the client exposes a setter method that the injector uses to inject the dependency.
3 - interface injection: the dependency provides an injector method that will inject the dependency into any client passed to it. Clients must implement an interface that exposes a setter method that accepts the dependency.

What is static binding and dynamic binding?
A.
Association of method call to the method body is known as binding.
There are two types of binding: Static Binding that happens at compile time and Dynamic Binding that happens at runtime.

If there is any private, final or static method in a class, there is static binding.
When type of the object is determined at run-time, it is known as dynamic binding.




